@page "/viajes/edit/{Id:int}"
@using Turismos.Web.Repositories
@using Turismos.Shared.Entities
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Viaje</h3>

@if (viaje is null)
{
    <p>Cargando...</p>
}
else
{
    <ViajeForm @ref="viajeForm" Viaje="viaje" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Viaje? viaje;
    private ViajeForm? viajeForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Viaje>($"api/viajes/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("viajes");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            viaje = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/viajes", viaje);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            viajeForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("viajes");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("viajes");
    }
}
